---
title: 2016-7-16 Shell脚本学习（2）
tags: Linux,Shell
grammar_cjkRuby: true
grammar_codeLinenums: true
grammar_center: true
---


# Linux Shell脚本教程


## 1 Shell简介

&ensp;&ensp;Shell本身是一个用C语言编写的程序，它是用户使用Unix/Linux的桥梁，用户的大部分工作都是通过Shell完成的。
&ensp;&ensp;Shell既是一种命令语言，又是一种程序设计语言。作为命令语言，它交互式地解释和执行用户输入的命令；作为程序设计语言，它定义了各种变量和参数，并提供了许多在高级语言中才具有的控制结构，包括循环和分支。

**Shell有两种执行命令的方式：**
+ 交互式（Interactive）：解释执行用户的命令，用户输入一条命令，Shell就解释执行一条。
+ 批处理（Batch）：用户事先写一个Shell脚本(Script)，其中有很多条命令，让Shell一次把这些命令执行完，而不必一条一条地敲命令。

Shell脚本和编程语言很相似，也有变量和流程控制语句，但Shell脚本是解释执行的，不需要编译，Shell程序从脚本中一行一行读取并执行这些命令，相当于一个用户把脚本中的命令一行一行敲到Shell提示符下执行。

## 2 几种常见的Shell
Shell是一种脚本语言，那么，就必须有解释器来执行这些脚本。
### 2.1 bash
bashLinux标准默认的shell，本教程也基于bash讲解。bash由Brian Fox和Chet Ramey共同完成，是BourneAgain Shell的缩写，内部命令一共有40个。

Linux使用它作为默认的shell是因为它有诸如以下的特色：
+ 可以使用类似DOS下面的doskey的功能，用方向键查阅和快速输入并修改命令。
+ 自动通过查找匹配的方式给出以某字符串开头的命令。
+ 包含了自身的帮助功能，你只要在提示符下面键入help就可以得到相关的帮助。
### 2.2 sh
sh 由Steve Bourne开发，是Bourne Shell的缩写，sh 是Unix 标准默认的shell。
### 2.3 ash
ash shell 是由Kenneth Almquist编写的，Linux中占用系统资源最少的一个小shell，它只包含24个内部命令，因而使用起来很不方便。
### 2.4 csh
csh 是Linux比较大的内核，它由以William Joy为代表的共计47位作者编成，共有52个内部命令。该shell其实是指向/bin/tcsh这样的一个shell，也就是说，csh其实就是tcsh。
### 2.5 ksh
ksh 是Korn shell的缩写，由Eric Gisin编写，共有42条内部命令。该shell最大的优点是几乎和商业发行版的ksh完全兼容，这样就可以在不用花钱购买商业版本的情况下尝试商业版本的性能了。
### zsh ....
注意：bash是 Bourne Again Shell 的缩写，是linux标准的默认shell ，它基于Bourne shell，吸收了C shell和Korn shell的一些特性。bash完全兼容sh，也就是说，用sh写的脚本可以不加修改的在bash中执行。

## 3 Shell脚本与编译型语言的差异
大体上，可以将程序设计语言可以分为两类：编译型语言和解释型语言。
### 3.1 编译型语言
很多传统的程序设计语言，例如Fortran、Ada、Pascal、C、C++和Java，都是编译型语言。<font color=red>这类语言需要预先将我们写好的源代码(source code)转换成目标代码(object code)，这个过程被称作“编译”。</font>

运行程序时，直接读取目标代码(object code)。由于编译后的目标代码(object code)非常接近计算机底层，因此执行效率很高，这是编译型语言的优点。

但是，由于编译型语言多半运作于底层，所处理的是字节、整数、浮点数或是其他机器层级的对象，往往实现一个简单的功能需要大量复杂的代码。例如，在C++里，就很难进行“将一个目录里所有的文件复制到另一个目录中”之类的简单操作。
### 3.2 解释型语言

解释型语言也被称作“脚本语言”。<font color=red>执行这类程序时，解释器(interpreter)需要读取我们编写的源代码(source code)，并将其转换成目标代码(object code)，再由计算机运行。</font>因为每次执行程序都多了编译的过程，因此效率有所下降。

使用脚本编程语言的好处是，它们多半运行在比编译型语言还高的层级，能够轻易处理文件与目录之类的对象；缺点是它们的效率通常不如编译型语言。不过权衡之下，通常使用脚本编程还是值得的：花一个小时写成的简单脚本，同样的功能用C或C++来编写实现，可能需要两天，而且一般来说，脚本执行的速度已经够快了，快到足以让人忽略它性能上的问题。脚本编程语言的例子有awk、Perl、Python、Ruby与Shell。

## 4 什么时候使用Shell
因为Shell似乎是各UNIX系统之间通用的功能，并且经过了POSIX的标准化。因此，Shell脚本只要“用心写”一次，即可应用到很多系统上。因此，之所以要使用Shell脚本是基于：
+ 简单性：Shell是一个高级语言；通过它，你可以简洁地表达复杂的操作。
+ 可移植性：使用POSIX所定义的功能，可以做到脚本无须修改就可在不同的系统上执行。
+ 开发容易：可以在短时间内完成一个功能强大又妤用的脚本。

但是，考虑到Shell脚本的命令限制和效率问题，下列情况一般不使用Shell：
1. 资源密集型的任务，尤其在需要考虑效率时（比如，排序，hash等等）。
2. 需要处理大任务的数学操作，尤其是浮点运算，精确运算，或者复杂的算术运算（这种情况一般使用C++或FORTRAN 来处理）。
3. 有跨平台（操作系统）移植需求（一般使用C 或Java）。
4. 复杂的应用，在必须使用结构化编程的时候（需要变量的类型检查，函数原型，等等）。
5. 对于影响系统全局性的关键任务应用。
6. 对于安全有很高要求的任务，比如你需要一个健壮的系统来防止入侵、破解、恶意破坏等等。
7. 项目由连串的依赖的各个部分组成。
8. 需要大规模的文件操作。
9. 需要多维数组的支持。
10. 需要数据结构的支持，比如链表或数等数据结构。
11. 需要产生或操作图形化界面 GUI。
12. 需要直接操作系统硬件。
13. 需要 I/O 或socket 接口。
14. 需要使用库或者遗留下来的老代码的接口。
15. 私人的、闭源的应用（shell 脚本把代码就放在文本文件中，全世界都能看到）。

如果你的应用符合上边的任意一条，那么就考虑一下更强大的语言吧——或许是Perl、Tcl、Python、Ruby——或者是更高层次的编译语言比如C/C++，或者是Java。即使如此，你会发现，使用shell来原型开发你的应用，在开发步骤中也是非常有用的。
## 5 第一个Shell脚本
打开文本编辑器，新建一个文件，扩展名为sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好，如果你用php写shell 脚本，扩展名就用php好了。

输入一些代码：

``` bash
#!/bin/bash
echo "Hello World !"
```


“#!” 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种Shell。echo命令用于向窗口输出文本。

运行Shell脚本有两种方法。
### 5.1 作为可执行程序

将上面的代码保存为==test.sh==，并 cd 到相应目录：

``` stata
chmod +x ./test.sh  #使脚本具有执行权限
./test.sh  #执行脚本
```

<font color=red>注意，一定要写成./test.sh，而不是</font>==test.sh==。运行其它二进制的程序也一样，直接写==test.sh==，linux系统会去PATH里寻找有没有叫test.sh的，而只有/bin, /sbin, /usr/bin，/usr/sbin等在PATH里，你的当前目录通常不在PATH里，所以写成test.sh是会找不到命令的，要用./test.sh告诉系统说，就在当前目录找。

通过这种方式运行bash脚本，第一行一定要写对，好让系统查找到正确的解释器。

这里的"系统"，其实就是shell这个应用程序（想象一下Windows Explorer），但我故意写成系统，是方便理解，既然这个系统就是指shell，那么一个使用/bin/sh作为解释器的脚本是不是可以省去第一行呢？是的。
### 5.2 作为解释器参数

这种运行方式是，直接运行解释器，其参数就是shell脚本的文件名，如：

``` stata
/bin/sh test.sh
/bin/php test.php
```


这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。

再看一个例子。下面的脚本使用 **read** 命令从 stdin 获取输入并赋值给 PERSON 变量，最后在 stdout 上输出：

``` bash
#!/bin/bash
# Author : mozhiyan
# Copyright (c) http://see.xidian.edu.cn/cpp/linux/
# Script follows here:
echo "What is your name?"
read PERSON
echo "Hello, $PERSON"
运行脚本：
chmod +x ./test.sh
$./test.sh
What is your name?
mozhiyan
Hello, mozhiyan
$
```
## 6 Shell变量

Shell支持自定义变量。
### 6.1 定义变量

定义变量时，变量名不加美元符号（$），如：

``` ini
variableName="value"
```


<font color=red>注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。</font>同时，变量名的命名须遵循如下规则：
+ 首个字符必须为字母（a-z，A-Z）或者下划线（_）。
+ 中间不能有空格，可以使用下划线（_）。
+ 不能使用标点符号。
+ 不能使用bash里的关键字（可用help命令查看保留关键字）。

变量定义举例：

``` ini
myUrl="http://see.xidian.edu.cn/cpp/linux/"
myNum=100
```


### 6.2 使用变量

使用一个定义过的变量，只要在变量名前面加美元符号（$）即可，如：

``` bash
your_name="mozhiyan"
echo $your_name
echo ${your_name}
```


变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：

``` bash
for skill in Ada Coffe Action Java 
do
    echo "I am good at ${skill}Script"
done
```


如果不给skill变量加花括号，写成echo "I am good at $skillScript"，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。

<font color=red>推荐给所有变量加上花括号，这是个好的编程习惯。</font>
### 6.3 重新定义变量

已定义的变量，可以被重新定义，如：

``` bash
myUrl="http://see.xidian.edu.cn/cpp/linux/"
echo ${myUrl}
myUrl="http://see.xidian.edu.cn/cpp/shell/"
echo ${myUrl}
```


这样写是合法的，但注意，第二次赋值的时候不能写 $myUrl="http://see.xidian.edu.cn/cpp/shell/"，使用变量的时候才加美元符（$）。
### 6.4 只读变量

使用 **readonly** 命令可以将变量定义为只读变量，只读变量的值不能被改变。

下面的例子尝试更改只读变量，结果报错：

``` bash
#!/bin/bash
myUrl="http://see.xidian.edu.cn/cpp/shell/"
readonly myUrl
myUrl="http://see.xidian.edu.cn/cpp/danpianji/"
```


运行脚本，结果如下：

``` gradle?linenums=false
/bin/sh: NAME: This variable is read only.
```


### 6.5 删除变量

使用 unset 命令可以删除变量。语法：

``` php?linenums=false
unset variable_name
```


变量被删除后不能再次使用；unset 命令不能删除只读变量。

举个例子：

``` bash
#!/bin/sh
myUrl="http://see.xidian.edu.cn/cpp/u/xitong/"
unset myUrl
echo $myUrl
```


上面的脚本没有任何输出。
### 6.6 变量类型

运行shell时，会同时存在三种变量：
**1) 局部变量**
局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。
**2) 环境变量**
所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。
**3) shell变量**
shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行


## 7 Shell特殊变量
->特殊变量列表<-
|变量|	含义|
|---|---|
|$0|	当前脚本的文件名|
|$n|	传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。
|$#|	传递给脚本或函数的参数个数。
|$*|	传递给脚本或函数的所有参数。
|$@|	传递给脚本或函数的所有参数。被双引号(" ")包含时，与 $* 稍有不同，下面将会讲到。
|$?|	上个命令的退出状态，或函数的返回值。
|$$|	当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。
### 7.1 命令行参数

运行脚本时传递给脚本的参数称为命令行参数。命令行参数用 $n 表示，例如，$1 表示第一个参数，$2 表示第二个参数，依次类推。

请看下面的脚本：

``` bash
#!/bin/bash
echo "File Name: $0"
echo "First Parameter : $1"
echo "First Parameter : $2"
echo "Quoted Values: $@"
echo "Quoted Values: $*"
echo "Total Number of Parameters : $#"
```


运行结果：

``` stata
$./test.sh Zara Ali
File Name : ./test.sh
First Parameter : Zara
Second Parameter : Ali
Quoted Values: Zara Ali
Quoted Values: Zara Ali
Total Number of Parameters : 2
```


### 7.2 $* 和 $@ 的区别

$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号(" ")包含时，都以"$1" "$2" … "$n" 的形式输出所有参数。

但是当它们被双引号(" ")包含时，"$*" 会将所有的参数作为一个整体，以"$1 $2 … $n"的形式输出所有参数；"$@" 会将各个参数分开，以"$1" "$2" … "$n" 的形式输出所有参数。

下面的例子可以清楚的看到 $* 和 $@ 的区别：

``` bash
#!/bin/bash
echo "\$*=" $*
echo "\"\$*\"=" "$*"
echo "\$@=" $@
echo "\"\$@\"=" "$@"
echo "print each param from \$*"
for var in $*
do
    echo "$var"
done
echo "print each param from \$@"
for var in $@
do
    echo "$var"
done
echo "print each param from \"\$*\""
for var in "$*"
do
    echo "$var"
done
echo "print each param from \"\$@\""
for var in "$@"
do
    echo "$var"
done
```


执行 ./test.sh "a" "b" "c" "d"，看到下面的结果：

``` livecodeserver
$*=  a b c d
"$*"= a b c d
$@=  a b c d
"$@"= a b c d
print each param from $*
a
b
c
d
print each param from $@
a
b
c
d
print each param from "$*"
a b c d
print each param from "$@"
a
b
c
d
```


### 7.3 退出状态

$? 可以获取上一个命令的退出状态。所谓退出状态，就是上一个命令执行后的返回结果。

退出状态是一个数字，一般情况下，大部分命令执行成功会返回 0，失败返回 1。

不过，也有一些命令返回其他值，表示不同类型的错误。

下面例子中，命令成功执行：

``` stata
$./test.sh Zara Ali
File Name : ./test.sh
First Parameter : Zara
Second Parameter : Ali
Quoted Values: Zara Ali
Quoted Values: Zara Ali
Total Number of Parameters : 2
$echo $?
0
$
```
## 8 Shell替换

如果表达式中包含特殊字符，Shell 将会进行替换。例如，在双引号中使用变量就是一种替换，转义字符也是一种替换。

举个例子：

``` bash
#!/bin/bash
a=10
echo -e "Value of a is $a \n"
```


运行结果：

``` coffeescript
Value of a is 10
```


这里 -e 表示对转义字符进行替换。如果不使用 -e 选项，将会原样输出：

``` livescript
Value of a is 10\n
```


下面的转义字符都可以用在 echo 中：
|转义字符|	含义
|-----|------|
|\\   |	反斜杠
|\a   |	警报，响铃
|\b|	退格（删除键）
|\f|	换页(FF)，将当前位置移到下页开头
|\n|	换行
|\r|	回车
|\t|	水平制表符（tab键） 
|\v|	垂直制表符 可以使用 echo 命令的 -E 选项禁止转义，默认也是不转义的；使用 -n 选项可以禁止插入换行符。
### 8.1 命令替换

命令替换是指Shell可以先执行命令，将输出结果暂时保存，在适当的地方输出。

命令替换的语法：

``` livecodeserver
`command`
```


注意是反引号，不是单引号，这个键位于 Esc 键下方。

下面的例子中，将命令执行结果保存在变量中：

``` bash
#!/bin/bash
DATE=`date`
echo "Date is $DATE"
USERS=`who | wc -l`
echo "Logged in user are $USERS"
UP=`date ; uptime`
echo "Uptime is $UP"
```


运行结果：

``` css
Date is Thu Jul  2 03:59:57 MST 2009
Logged in user are 1
Uptime is Thu Jul  2 03:59:57 MST 2009
03:59:57 up 20 days, 14:03,  1 user,  load avg: 0.13, 0.07, 0.15
```


### 8.2 变量替换

变量替换可以根据变量的状态（是否为空、是否定义等）来改变它的值

可以使用的变量替换形式：
|形式|	说明|
|---|---|
|${var}|	变量本来的值|
|${var:-word}|	如果变量 var 为空或已被删除(unset)，那么返回 word，但不改变 var 的值。|
|${var:=word} |	如果变量 var 为空或已被删除(unset)，那么返回 word，并将 var 的值设置为 word。|
|${var:?message}|如果变量 var 为空或已被删除(unset)，那么将消息 message 送到标准错误输出，可以用来检测变量 var 是否可以被正常赋值。若此替换出现在Shell脚本中，那么脚本将停止运行。|
|${var:+word}|	如果变量 var 被定义，那么返回 word，但不改变 var 的值。|
请看下面的例子：

``` bash
#!/bin/bash

echo ${var:-"Variable is not set"}
echo "1 - Value of var is ${var}"

echo ${var:="Variable is not set"}
echo "2 - Value of var is ${var}"

unset var
echo ${var:+"This is default value"}
echo "3 - Value of var is $var"

var="Prefix"
echo ${var:+"This is default value"}
echo "4 - Value of var is $var"

echo ${var:?"Print this message"}
echo "5 - Value of var is ${var}"
```


运行结果：

``` bash
Variable is not set
1 - Value of var is
Variable is not set
2 - Value of var is Variable is not set
3 - Value of var is
This is default value
4 - Value of var is Prefix
Prefix
5 - Value of var is Prefix
```
## 9 运算符

Bash 支持很多运算符，包括算数运算符、关系运算符、布尔运算符、字符串运算符和文件测试运算符。

原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。

**expr** 是一款表达式计算工具，使用它能完成表达式的求值操作。

例如，两个数相加：

``` bash
#!/bin/bash
val=`expr 2 + 2`
echo "Total value : $val"
```


运行脚本输出：

``` bash?linenums
Total value : 4
```


两点注意：
+ 表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。
+ 完整的表达式要被 \` ` 包含，注意这个字符不是常用的单引号，在 Esc 键下边。
### 9.1 算术运算符

先来看一个使用算术运算符的例子：

``` bash
#!/bin/sh
a=10
b=20
val=`expr $a + $b`
echo "a + b : $val"
val=`expr $a - $b`
echo "a - b : $val"
val=`expr $a \* $b`
echo "a * b : $val"
val=`expr $b / $a`
echo "b / a : $val"
val=`expr $b % $a`
echo "b % a : $val"
if [ $a == $b ]
then
   echo "a is equal to b"
fi
if [ $a != $b ]
then
   echo "a is not equal to b"
fi
```


运行结果：

``` livecodeserver
a + b : 30
a - b : -10
a * b : 200
b / a : 2
b % a : 0
a is not equal to b
```


注意：
+ 乘号(*)前边必须加反斜杠(\)才能实现乘法运算；
+ if...then...fi 是条件语句，后续将会讲解。

-> 算术运算符列表<-
|运算符|	说明|	举例
|---|---|---|
|+	|加法|	`expr $a + $b` 结果为 30。
|-	|减法|	`expr $a - $b` 结果为 10。
|*	|乘法|	`expr $a \* $b` 结果为  200。
|/	|除法|	`expr $b / $a` 结果为 2。
|%	|取余|	`expr $b % $a` 结果为 0。
|=	|赋值|	a=$b 将把变量 b 的值赋给 a。
|==	|相等。|用于比较两个数字，相同则返回 true。	[ $a == $b ] 返回 false。
!=	不相等。用于比较两个数字，不相同则返回 true。	[ $a != $b ] 返回 true。
注意：条件表达式要放在方括号之间，并且要有空格，例如 [$a==$b] 是错误的，必须写成 [ $a == $b ]。
### 9.2 关系运算符

关系运算符只支持数字，不支持字符串，除非字符串的值是数字。

先来看一个关系运算符的例子：

``` bash
#!/bin/sh
a=10
b=20
if [ $a -eq $b ]
then
   echo "$a -eq $b : a is equal to b"
else
   echo "$a -eq $b: a is not equal to b"
fi
if [ $a -ne $b ]
then
   echo "$a -ne $b: a is not equal to b"
else
   echo "$a -ne $b : a is equal to b"
fi
if [ $a -gt $b ]
then
   echo "$a -gt $b: a is greater than b"
else
   echo "$a -gt $b: a is not greater than b"
fi
if [ $a -lt $b ]
then
   echo "$a -lt $b: a is less than b"
else
   echo "$a -lt $b: a is not less than b"
fi
if [ $a -ge $b ]
then
   echo "$a -ge $b: a is greater or  equal to b"
else
   echo "$a -ge $b: a is not greater or equal to b"
fi
if [ $a -le $b ]
then
   echo "$a -le $b: a is less or  equal to b"
else
   echo "$a -le $b: a is not less or equal to b"
fi
```


运行结果：
1

``` stylus
0 -eq 20: a is not equal to b
10 -ne 20: a is not equal to b
10 -gt 20: a is not greater than b
10 -lt 20: a is less than b
10 -ge 20: a is not greater or equal to b
10 -le 20: a is less or  equal to b
```


->关系运算符列表<-
|运算符|	说明|	举例|
|---|---|---|
|-eq|	检测两个数是否相等，相等返回 true。|	[ $a -eq $b ] 返回 true。
|-ne|	检测两个数是否相等，不相等返回 true。|	[ $a -ne $b ] 返回 true。
|-gt|	检测左边的数是否大于右边的，如果是，则返回 true。|	[ $a -gt $b ] 返回 false。
|-lt	|检测左边的数是否小于右边的，如果是，则返回 true。	|[ $a -lt $b ] 返回 true。
|-ge|	检测左边的数是否大等于右边的，如果是，则返回 true。|	[ $a -ge $b ] 返回 false。
|-le|	检测左边的数是否小于等于右边的，如果是，则返回 true。|	[ $a -le $b ] 返回 true。
### 9.3 布尔运算符

先来看一个布尔运算符的例子：

``` bash
#!/bin/sh
a=10
b=20
if [ $a != $b ]
then
   echo "$a != $b : a is not equal to b"
else
   echo "$a != $b: a is equal to b"
fi
if [ $a -lt 100 -a $b -gt 15 ]
then
   echo "$a -lt 100 -a $b -gt 15 : returns true"
else
   echo "$a -lt 100 -a $b -gt 15 : returns false"
fi
if [ $a -lt 100 -o $b -gt 100 ]
then
   echo "$a -lt 100 -o $b -gt 100 : returns true"
else
   echo "$a -lt 100 -o $b -gt 100 : returns false"
fi
if [ $a -lt 5 -o $b -gt 100 ]
then
   echo "$a -lt 100 -o $b -gt 100 : returns true"
else
   echo "$a -lt 100 -o $b -gt 100 : returns false"
fi
```


运行结果：

``` bash
10 != 20 : a is not equal to b
10 -lt 100 -a 20 -gt 15 : returns true
10 -lt 100 -o 20 -gt 100 : returns true
10 -lt 5 -o 20 -gt 100 : returns false
```


->布尔运算符列表<-
|运算符|	说明|	举例
|---|---|---|
|!	|非运算，表达式为 true 则返回 false，否则返回 true。	|[ ! false ] 返回 true。
|-o|	或运算，有一个表达式为 true 则返回 true。	|[ $a -lt 20 -o $b -gt 100 ] 返回 true。
|-a|	与运算，两个表达式都为 true 才返回 true。	|[ $a -lt 20 -a $b -gt 100 ] 返回 false。
### 9.4 字符串运算符

先来看一个例子：

``` bash
#!/bin/sh
a="abc"
b="efg"
if [ $a = $b ]
then
   echo "$a = $b : a is equal to b"
else
   echo "$a = $b: a is not equal to b"
fi
if [ $a != $b ]
then
   echo "$a != $b : a is not equal to b"
else
   echo "$a != $b: a is equal to b"
fi
if [ -z $a ]
then
   echo "-z $a : string length is zero"
else
   echo "-z $a : string length is not zero"
fi
if [ -n $a ]
then
   echo "-n $a : string length is not zero"
else
   echo "-n $a : string length is zero"
fi
if [ $a ]
then
   echo "$a : string is not empty"
else
   echo "$a : string is empty"
fi
```


运行结果：

``` applescript
abc = efg: a is not equal to b
abc != efg : a is not equal to b
-z abc : string length is not zero
-n abc : string length is not zero
abc : string is not empty
```


->字符串运算符列表<-
|运算符|	说明|	举例
|---|---|---|
|=	|检测两个字符串是否相等，相等返回 true。	|[ $a = $b ] 返回 false。
|!=	|检测两个字符串是否相等，不相等返回 true。	|[ $a != $b ] 返回 true。
|-z|	检测字符串长度是否为0，为0返回 true。	|[ -z $a ] 返回 false。
|-n|	检测字符串长度是否为0，不为0返回 true。	|[ -z $a ] 返回 true。
|str|	检测字符串是否为空，不为空返回 true。	|[ $a ] 返回 true。
### 9.5 文件测试运算符

文件测试运算符用于检测 Unix 文件的各种属性。

例如，变量 file 表示文件“/var/www/tutorialspoint/unix/test.sh”，它的大小为100字节，具有 rwx 权限。下面的代码，将检测该文件的各种属性：

``` bash
#!/bin/sh
file="/var/www/tutorialspoint/unix/test.sh"
if [ -r $file ]
then
   echo "File has read access"
else
   echo "File does not have read access"
fi
if [ -w $file ]
then
   echo "File has write permission"
else
   echo "File does not have write permission"
fi
if [ -x $file ]
then
   echo "File has execute permission"
else
   echo "File does not have execute permission"
fi
if [ -f $file ]
then
   echo "File is an ordinary file"
else
   echo "This is sepcial file"
fi
if [ -d $file ]
then
   echo "File is a directory"
else
   echo "This is not a directory"
fi
if [ -s $file ]
then
   echo "File size is zero"
else
   echo "File size is not zero"
fi
if [ -e $file ]
then
   echo "File exists"
else
   echo "File does not exist"
fi
```


运行结果：

``` vhdl
File has read access
File has write permission
File has execute permission
File is an ordinary file
This is not a directory
File size is zero
File exists
```


->文件测试运算符列表<-
|操作符|	说明|	举例
|---|---|---|
|-b file|	检测文件是否是块设备文件，如果是，则返回 true。	|[ -b $file ] 返回 false。
|-c file|检测文件是否是字符设备文件，如果是，则返回 true。	|[ -b $file ] 返回 false。
|-d file|	检测文件是否是目录，如果是，则返回 true。	|[ -d $file ] 返回 false。
|-f file|	检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。|	[ -f $file ] 返回 true。
|-g file|	检测文件是否设置了 SGID 位，如果是，则返回 true。	|[ -g $file ] 返回 false。
|-k file|	检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。|	[ -k $file ] 返回 false。
|-p file|	检测文件是否是具名管道，如果是，则返回 true。	|[ -p $file ] 返回 false。
|-u file|	检测文件是否设置了 SUID 位，如果是，则返回 true。	|[ -u $file ] 返回 false。
|-r file|	检测文件是否可读，如果是，则返回 true。	|[ -r $file ] 返回 true。
|-w file|	检测文件是否可写，如果是，则返回 true。	|[ -w $file ] 返回 true。
|-x file|	检测文件是否可执行，如果是，则返回 true。	|[ -x $file ] 返回 true。
|-s file|	检测文件是否为空（文件大小是否大于0），不为空返回 true。	|[ -s $file ] 返回 true。
|-e file|	检测文件（包括目录）是否存在，如果是，则返回 true。	|[ -e $file ] 返回 true。




# 10  Shell注释

以“#”开头的行就是注释，会被解释器忽略。

sh里没有多行注释，只能每一行加一个#号。只能像这样：

``` vala
#--------------------------------------------
# 这是一个自动打ipa的脚本，基于webfrogs的ipa-build书写：
# https://github.com/webfrogs/xcode_shell/blob/master/ipa-build
# 功能：自动为etao ios app打包，产出物为14个渠道的ipa包
# 特色：全自动打包，不需要输入任何参数
#--------------------------------------------
##### 用户配置区 开始 #####
#
#
# 项目根目录，推荐将此脚本放在项目的根目录，这里就不用改了
# 应用名，确保和Xcode里Product下的target_name.app名字一致
#
##### 用户配置区 结束  #####
```


如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？每一行加个#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。


如果在vim中编辑文件的话，多行注释的话不必如此费力
1 -- ctrl + v
2 -- 方向键选择需要的行
3 -- shift + i
4 -- 输入#
5 -- 按下esc

取消注释的话：
1 -- ctrl + v
2 -- 方向键选择注释行前的#
3 -- d
4 -- 完成


# 11 Shell字符串
字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟PHP类似。
## 11.1 单引号

``` vhdl
str='this is a string'
```


单引号字符串的限制：
+ 单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；
+ 单引号字串中不能出现单引号（对单引号使用转义符后也不行）。
## 11.2 双引号

``` smalltalk
your_name='qinjx'
str="Hello, I know your are \"$your_name\"! \n"
```


双引号的优点：
+ 双引号里可以有变量
+ 双引号里可以出现转义字符
## 11.3 拼接字符串

``` bash
your_name="qinjx"
greeting="hello, "$your_name" !"
greeting_1="hello, ${your_name} !"
echo $greeting $greeting_1
## 获取字符串长度
```


``` bash
string="abcd"
echo ${#string} #输出 4
```


## 11.4 提取子字符串



``` bash
string="alibaba is a great company"
echo ${string:1:4} #输出liba
```


## 11.5 查找子字符串


``` vim
string="alibaba is a great company"
echo `expr index "$string" is`
```

网友解析:
echo \`expr index "$string" is\`它的意思是分别查找 “i” 和 “s” 在string中出现的下标位置，下标从1开始。
查找子字符 而不是 查找子字符串，



# 12 Shell数组

Shell在编程方面比Windows批处理强大很多，无论是在循环、运算。

bash支持一维数组（不支持多维数组），并且没有限定数组的大小。类似与C语言，数组元素的下标由0开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于0。
## 12.1定义数组

在Shell中，用括号来表示数组，数组元素用“空格”符号分割开。定义数组的一般形式为：
    array_name=(value1 ... valuen)
例如：

``` lisp
array_name=(value0 value1 value2 value3)
```


或者

``` lisp
array_name=(
value0
value1
value2
value3
)
```


还可以单独定义数组的各个分量：

``` ini
array_name[0]=value0
array_name[1]=value1
array_name[2]=value2
```


可以不使用连续的下标，而且下标的范围没有限制。
## 12.2 读取数组

读取数组元素值的一般格式是：

``` scss
    ${array_name[index]}
```


例如：

``` elixir
valuen=${array_name[2]}
```


举个例子：

``` bash
#!/bin/sh
NAME[0]="Zara"
NAME[1]="Qadir"
NAME[2]="Mahnaz"
NAME[3]="Ayan"
NAME[4]="Daisy"
echo "First Index: ${NAME[0]}"
echo "Second Index: ${NAME[1]}"
```


运行脚本，输出：

``` fortran
$./test.sh
First Index: Zara
Second Index: Qadir
```


使用@ 或 * 可以获取数组中的所有元素，例如：

``` scss
${array_name[*]}
${array_name[@]}
```


举个例子：

``` bash
#!/bin/sh
NAME[0]="Zara"
NAME[1]="Qadir"
NAME[2]="Mahnaz"
NAME[3]="Ayan"
NAME[4]="Daisy"
echo "First Method: ${NAME[*]}"
echo "Second Method: ${NAME[@]}"
```


运行脚本，输出：

``` oxygene
$./test.sh
First Method: Zara Qadir Mahnaz Ayan Daisy
Second Method: Zara Qadir Mahnaz Ayan Daisy
```


## 12.3 获取数组的长度

获取数组长度的方法与获取字符串长度的方法相同，例如：

``` elixir
# 取得数组元素的个数
length=${#array_name[@]}
# 或者
length=${#array_name[*]}
# 取得数组单个元素的长度
lengthn=${#array_name[n]}
```

# 13 Shell echo命令
echo是Shell的一个内部指令，用于在屏幕上打印出指定的字符串。命令格式：

``` php
echo arg
```


您可以使用echo实现更复杂的输出格式控制。
## 13.1 显示转义字符

``` vbscript
echo "\"It is a test\""
```


结果将是：
"It is a test"

双引号也可以省略。
## 13.2 显示变量

``` bash
name="OK"
echo "$name It is a test"
```


结果将是：
OK It is a test

同样双引号也可以省略。

如果变量与其它字符相连的话，需要使用大括号（{ }）：

``` bash
mouth=8
echo "${mouth}-1-2009"
```


结果将是：
8-1-2009
## 13.3 显示换行

``` php
echo -e "OK! \n"
echo "It is a test"
```
<font color=red>输入转移字符时，反斜杠'\'要与前面的字符有至少一个空格的距离

echo要使用-e选项才能实现转义</font>


输出：
OK!
It is a test
## 显示不换行

``` php
echo "OK! \c"
echo "It is a test"
```


输出：
OK!It si a test
显示结果重定向至文件

``` php
echo "It is a test" > myfile
```


## 13.4 原样输出字符串

若需要原样输出字符串（不进行转义），请使用单引号。例如：

``` nginx
echo '$name\"'
```


显示命令执行结果

``` dos
echo `date`
```


结果将显示当前日期

从上面可看出，双引号可有可无，单引号主要用在原样输出中。


# 14 Shell Printf

printf 命令用于格式化输出， 是echo命令的增强版。它是C语言printf()库函数的一个有限的变形，并且在语法上有些不同。

注意：printf 由 POSIX 标准所定义，移植性要比 echo 好。

如同 echo 命令，printf 命令也可以输出简单的字符串：

``` stata
$printf "Hello, Shell\n"
Hello, Shell
$
```


printf 不像 echo 那样会自动换行，必须显式添加换行符(\n)。

printf 命令的语法：

``` mel
printf  format-string  [arguments...]
```


format-string 为格式控制字符串，arguments 为参数列表。

printf()在C语言入门教程中已经讲到，功能和用法与 printf 命令类似，请查看：C语言格式输出函数printf()详解

这里仅说明与C语言printf()函数的不同：
printf 命令不用加括号
format-string 可以没有引号，但最好加上，单引号双引号均可。
参数多于格式控制符(%)时，format-string 可以重用，可以将所有参数都转换。
arguments 使用空格分隔，不用逗号。

请看下面的例子：
``` perl
# format-string为双引号
$ printf "%d %s\n" 1 "abc"
1 abc
# 单引号与双引号效果一样 
$ printf '%d %s\n' 1 "abc" 
1 abc
# 没有引号也可以输出
$ printf %s abcdef
abcdef
# 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用
$ printf %s abc def
abcdef
$ printf "%s\n" abc def
abc
def
$ printf "%s %s %s\n" a b c d e f g h i j
a b c
d e f
g h i
j
# 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替
$ printf "%s and %d \n" 
and 0
# 如果以 %d 的格式来显示字符串，那么会有警告，提示无效的数字，此时默认置为 0
$ printf "The first program always prints'%s,%d\n'" Hello Shell
-bash: printf: Shell: invalid number
The first program always prints 'Hello,0'
$
```


注意，根据POSIX标准，浮点格式%e、%E、%f、%g与%G是“不需要被支持”。这是因为awk支持浮点预算，且有它自己的printf语句。这样Shell程序中需要将浮点数值进行格式化的打印时，可使用小型的awk程序实现。然而，内建于bash、ksh93和zsh中的printf命令都支持浮点格式。




